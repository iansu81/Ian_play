#include <iostream>
#include <string>
#include <vector>
#include <bitset>

using namespace std;

class Solution {
public:
    static bool isValid(const vector<string>& inputCards)
    {
        if (inputCards.size() < 3) {
            return false;
        }
        return isSameSuit(inputCards) || isIncremental(inputCards);
    }

    static bool isSameSuit(const vector<string>& inputCards)
    {
        if (inputCards.size() == 0) {
            return false;
        }

        char suit = inputCards[0][1];
        for (const auto& card : inputCards) {
            if (card[1] != suit) {
                return false;
            }
        }
        return true;
    }

    static bool isIncremental(const vector<string>& inputCards)
    {
        if (inputCards.size() == 0) {
            return false;
        }
        
        int check = 0;
        int minimalValue = 13;
        for (const auto& card : inputCards) {
            int val = valueToNumber(card[0]);
            if (val < 1) {
                return false;
            }
            check |= 1 << val;

            minimalValue = min(minimalValue, val);
        }
        return (check >> minimalValue) == ((1 << inputCards.size()) - 1);
    }

    static int valueToNumber(const char val) {
        if (isdigit(val)) {
            return val - '0';
        }
        if (val == 'A') {
            return 1;
        } else if (val == 'J') {
            return 11;
        } else if (val == 'Q') {
            return 12;
        } else if (val == 'K') {
            return 13;
        }
        return 0;
    }
};

int main()
{
    vector<string> inputCards = {
        "AH", "2D", "3C", "4D", "5H"
    };

    cout << Solution::isValid(inputCards);
}